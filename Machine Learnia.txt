Machine Learnia : https://www.youtube.com/watch?v=82KLS2C_gNQ&list=PLO_fdPEVlfKqMDNmCFzQISI2H_nJcEDJq
Cours : Python

Telecharger Python et installer sur www.anaconda.com/   (Anaconda est une distrib de Python)
Lancer Anaconda et installer les Interfaces : Spyder et Jupyter
            --> Spyder : Editeur de code standard avec console

-------- Variables et Fonction ------------------

#Arithmetic

    print(x + y)
    print(x - y)
    print(x * y)
    print(x / y)
    print(x ** y)   : fonction puissance

# Comparison

    print(x <= y)
    print(x >= y)
    print(x == y)
    print(x != y)

# Logic

    print(False & True) # AND
    print(False | True) # OR
    print(False True) # XOR

Fonctions 

    f = lambda x : x**2  < ---- Equivalant à f(x)=x² . Lambda adapté pour les fonctions maths
    f = lambda x,y : x**2 + y

On utilise plus les fonctions en programmation pour les fonctionnalités. 
NB : Les instructions avant le prochain saut de ligne font partir de la fonction

    def e_potential (mass, height, g=9.81): 
        E = mass * height * g
        print(E, 'Joules')
        return E

    result = e_potential (mass=80, height=5)
    result = e_potential (mass=80, height=5, g=6.7)

Exo: Pour retourner true or false si l'energie potentielle est < à une valeur limite :

    def e_potential_limit(mass, height, limit, g=9.81):
        E = mass * height * g
        #print(E)
        return E < limit

    e_potential_limit(5,10,6000) < ---- retourne true


    def fibonacci(n):
        a = 0
        b = 1
        while a < n:
            print(a)
            a, b = b, a+b
        
---------- Les structures de condition ----------

Instruction : if --------

    def signe(x):
        if x > 0:
        print(x, 'positive')
        elif x == 0:
        print(x, 'nul)
        else:
        print(x, 'negative')


Instruction : For ------------

    for i in range(10):
        print(i)
    
NB : range() -> génère une sequence de nombre que l'on peut parcourir
Example: range(10) -> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9

range() prend en réalité 3 arguments: range(debut, fin, pas)
Example:

    for element in range(5, 10, 2):
        print(element)

    5
    7
    9

range() peut avoir des arguments négatifs qui inversent les sens de parcours

    for element in range(10, -10, -3):
        signe (element)

    10 positif
     7 positif
     4 positif
     1 positif
    -2 negatif
    -5 negatif
    -8 negatif

Instruction : While ------------

    x = 0

    while x<3:
        print(x)
        x += 1

    0
    1
    2
    3

-------- Les Sequences : Listes, Tuples, Strings ------------------ 

Sequence : ensemble d'elements ordonnés. Chaque élt a un indexe

# Lists 

    list_1= [1, 4, 2, 7, 35, 84]
    cities = ['Paris', 'Berlin', 'London', 'Brussels']
    list_2= [list_1, cities]
    list_3 = [] 

# Tuple
    1 = (1, 2, 6, 1, 7)

# String
    prenom = 'Nicolas'


#INDEXING

    print(cities[0]) # first element = index 0
    print(cities[1]) # second element = index 1
    print(cities[-1]) # last element
    print(cities[-2]) # before last

# Slicing

Permet de récupérer des elts en indiquant : debut:fin:pas

    print cities = [0:3] (or cities = [:3] quand on commence par 0)     --> 'Paris', 'Berlin', 'London'
    print cities = [2:]  --> 'London', 'Brussels'
    print cities = [1:3] --> 'Berlin', 'London'
    print cities = [::2] --> 'Paris', 'London'
    print cities = [::-1]--> 'Brussels''London','Berlin','Paris'  
    
    print(prenom[:3]) --> Nic
    
    - Ajout en fin de liste
    cities.append('Dublin')     --> 'Paris', 'Berlin', 'London', 'Brussels', 'Dublin'
    
    - Insertion à une position donnée
    cities.insert(2, 'Madrid')  --> 'Paris', 'Berlin', 'Madrid', 'London', 'Brussels', 'Dublin' NB: Index 2 = 3e position

    - Extend : Pour ajouter une liste à la fin d'une liste existante 
    
    cities_2 = ['Amsterdam', 'Rome']
    cities.extend(cities_2) --> cities = ['Paris', 'Berlin', 'Madrid', 'London', 'Brussels', 'Dublin','Amsterdam', 'Rome']

    - Voir le nombre d'elts dans la liste 
    len(cities) --> 8
    
    - Trier une liste :  
    len(cities).sort()  --> alphabetique ou numerique du plus grand au plus    
    len(cities).sort(reverse=true)   --> Tri inverse alphabetique ou numerique
    
    - Compter les occurences :
    cities.count('Paris') = 1
    
    - Voir autres methodes tels que : pop, clear, remove ...
    
    - If : pour Vérifier si un elt est dans une liste :
    
        if 'Belfast' in cities:
            print('Yes')
        else:
            print('Non')

        --> Non

    - For : Pour parcourir une liste 
    
        for i in (cities): 
            print(i)

    
    - For : Pour parcourir une liste et afficher les indexes:
    
        for index, value in enumerate(cities): 
            print(index, value)

        0 Rome
        1 Paris
        2 Madrid   
        ...
        
    - zip : pour parcourir et afficher les données de 2 listes en parallèle. Elle s'arrête là où la liste la plus courte 
            prend fin

        for a, b in zip (villes, liste_2): 
            print(a, b)    
    
        Rome 2
        Paris 3
        Madrid 23
        ...
 
Exo : Return a list containing the fibonacci sequence

    def fibonacci(n):
        
        a = 0
        b = 1
        fib = [a]
        while b < n:
            a, b = b, a+b
            fib.append(a)
        return fib
        
        print(fibonacci(1000))
 
 ---- Les Dictionnaires -------------------------------

Ici les valeurs ne sont pas ordonnées (pas d''indexes) mais des clés. C'est une association "clé : valeur " .
La clé doit être unique

    translation { 
        "dog": "dog",
        "chat" : "cat",
        "mouse": "mouse",
        "bird": "bird" 
    }

    inventaire = {
        "bananes":5000,
        "pommes":2094,
        "poires":412809,
        "cerises":2893
        }

- On peut nester des dicts :

    dictionary_3 = { 
        "dict_1": translation, 
        "dict_2": inventory 
        }


- Certains utilisent les dicts pour créer leur réseau de neurones (voir plus loin)
    
    import numpy as np

    parameters = { 
        "W1": np.random.randn(10, 100),
        "b1": np.random.randn(10, 1),
        "W2" : np.random.randn(10, 10),
        "b2": np.random.randn(10, 1)
        }
    
- Afficher les données du dict :
    inventaire.values()  -->  dict_values([5000, 2094, 412809, 2893])
   
 
dict_values([5000, 2094, 412809, 2893])

- Afficher les clés : 
    inventaire.keys() -->  dict_keys(['bananes', 'pommes', 'poires', 'cerises'])

- Longueur dict :
    len(inventaire)  --> 4

- Ajouter un nouvel élément au dict :
    inventaire ["abricots"] = 4902      -->  Pas besoin d'ordre et d'indexe ici car pas une séquence

     -->   inventaire = {
                'bananes':5000,
                'pommes': 2094,
                'poires':412809,
                'cerises':2893,
                'abricots': 4902} 
    
- Autres méthodes :

        inventory.
                clear
                copy
                fromkeys
                get
                items
                keys
                pop
                popitem
                setdefault
                update

- get : permet d'afficher une valeur par défaut si on ne retrouve pas l'elt recherché dans dict :   
 
     print(inventaire.get('peches'))    --> None    : valeur non trouvée et None est renvoyé
     print(inventaire.get('peches',1))  --> 1       : valeur non trouvée donc 1 est renvoyé
     print(inventaire.get('cerises',1)) --> 2893    : valeur trouvée et renvoyée
    

- fromkeys : Permet de créer un dict à partir d'une liste forunie

    list_1 = ('Paris', 'London', 'Brussels')

    inventory.fromkeys(list_1)
    {'Paris': None, 'London': None, 'Brussels': None }  --> None est la valeur associées aux clés du dict

    inventory.fromkeys(list_1, 'default')
    {'Paris': 'default', 'London': 'default', 'Brussels':'default'} --> 'default' est la valeur associées aux clés du dict
    
- pop : 1. Retire un élt de dict ou d''une liste et 2. retourne la valeur de l''élt en sortie

    fruits = inventaire.pop('abricots') -->  fruits = 4902 

     -->   inventaire = {
                'bananes':5000,
                'pommes': 2094,
                'poires':412809,
                'cerises':2893
                }     
    
- For : Pour afficher un dict :

    for i in inventaire: 
        print(i)

        bananes 
        pommes 
        poires 
        cerises   

    for i in inventaire.values():   -->  Pour afficher les valeurs
        print(i)

        5000
        2094
        412809
        2893  
    
    for k, v in inventaire.items(): -->  Pour afficher les clés et les valeurs
        print(k, v)

        bananes 5000
        pommes  2094 
        poires  412809
        cerises 2893    
    
 
----------- Built-in function - Fonctions de base -------------------------

docs.python.org/3/library/functions.html#len


- abs : valeur absolue
    x = -2 -->  abs(x) = 2

- round
    x = 3,14 -->  round(x) = 3

- max et min

    liste_1 = [0, 23, 14, -19]
    max(liste_1) = 23
    min(liste_1) = -19
    len(list_1) = 4

- sum des elts :
    sum(list_1) = 18

- all et any :

    all : retourne True quand tous les éléments de la liste sont égaux à True
    any : retourne True quand au moins un élément de la liste est égal à True

    list_2 = [True, True, False] 
        all (list_2) --> False
        any (list_2) --> True

    any (list_1) --> True  : car au moins un élt n'est pas égal à 0

 ----- Conversion de types 

    x = 10 --> type(x) est int
    x = str(x) --> type(x) est str
    
    x = '10' --> type(x) est str
    x = int(x) --> type(x) est int
    
    x=10 --> float(x) = 10.0
    type(float(x)) est float
    
    list_1 = [0, 61, 63, 243]
    tuple(list_1) --> (0, 61, 63, 243)

    tuple_1 = tuple(list_1) 
    list(tuple_1) --> [0, 61, 63, 243]
    
 - Convert dict en liste : 
    list(inventaire.keys()) --> ['bananes', 'pommes', 'poires']

 - Fonction binaire, Oct, hexa 
   bin(15) --> '0b1111'
   oct(15) --> '0o17'
   hex(15) --> '0xf'
   
- Input : saisir des données

    x = input('enter a number : ')
    enter a number : 5      --> x = '5' de type str

- Fonction format()

    x = 25
    ville = 'Paris'

    message = "la température est de {} degC a {}".format(x, ville)
    print(message) -->  la température est de 25 deg a Paris

    message = f"la température est de {x} degC a {ville}"
    print(message) -->  la température est de 25 deg a Paris

Exple : 

    import numpy as np

    parameters = { 
            "W1": np.random.randn(2, 4),
            "b1": np.zeros((2, 1)),
            "W2": np.random.randn(2, 2),
            "b2": np.zeros((2, 1))
            }

    for i in range(1,3):
        print("couche", i)
        print(parameters["W{}".format(i)])  --> même résultat avec print(parameters["W"+str(i)])

        couche 1 

        [-0.61807457 0.89824653 -0.57570348 0.16627105]
        [-1.07827718 -2.56498375 -0.16742567 -1.0747071 ]]

        couche 2 

        [[-0.91408156 0.83830415][0.15802067 -0.13057656]]


- Fonction open : gestion des fichiers 

    open file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
    
     Character      Meaning

        'r'         open for reading (default)
        'w'         open for writing, truncating the file first
        'x'         open for exclusive creation, failing if the file already exists
        'a'         open for writing, appending to the end of the file if it exists
        'b'         binary mode
        't'         text mode (default)

Exemple : 

   - Ouvrir et ecrire dans le fichier :
   
    f = open('file.txt', 'w')
    f.write('hello')
    f.close()

   - Ouvrir et lire dans le fichier :
   
    f = open('file.txt', 'r')
    print(f.read())                        -->    'hello'
    f.close()

    Dans la pratique :
    with open('fichier.txt', 'r') as f:
        print(f.read())                 --> 'hello'   NB: Pas besoin de f.close() car python ferme automatiquement le fichier

Exemple : Ecrire dans un fichier, le carré de nombre de 0 à 10 : 

    with open('fichier.txt', 'w') as f:
        for i in range(10):
            f.write("{}^2 = {} \n".format(i, i**2))   --> format est utile ici car write prend 1 seul arg de type str
    
        0^2 = 0
        1^2 = 1
        2^2 = 4
        3^2 = 9
        4^2 = 16
        5^2 = 25
        6^2 = 36
        7^2 = 49
        8^2 = 64
        9^2 = 81
 
 
 Exo : Mettre toutes les lignes d'un fichier dans une liste : 

    - Méthode 1 : 
    
      with open('fichier.txt', 'r') as f:
           liste f.read().splitlines()      --> avec splitlines(), '\n' est supprimé. Avec readlines(), '\n' est présent

    - Méthode 2 : avec "liste comprehension"
    
    liste = [line.strip() for line in open('fichier.txt', 'r')]  -->  '\n' est présent
ou  liste = [line for line in open('fichier.txt', 'r')]          -->  '\n' est supprimé
    
    

I 
 ---------- Packages et Modules ----------------------------
 
 - Le dossier '_pycache_' dans le répertoire des fichiers et modules de python, permet de créer des liens entre les modules
 
 1) vi projet_1.py 
 
         def fibonacci(n):
        # returns fibonacci series in a list
            a, b = 0, 1
            fib = []
            while a<n:
                fib.append(a)
                a, b = b, a+b

            return fib

I   EOF
 
 2) vi projet_2.py
 
        import projet_1 as p1

        liste = p1.fibonacci(50)      --> La fonction retourne une liste
     
    
    EOF
 
 Dans projet_2.py, on peut choisir d'importer juste la fonction fibo :
 
    vi projet_2.py
 
        from projet_1 import fibonacci      --> import * si on veut importer tous les elts du module

        liste = fibonacci(50)               --> On n'a plus besoin de préfixé par le nom du projet p1
     
    
    EOF
 
 docs.python.org/3/py-modindex.html : doc officielle de python pour les modules 
 
 - Un module contient du code
 - Un package regroupe des modules  (exple pkg MATPLOTLIB qui contient le module PAIRPLOT)
 
 - Modules de base importants : 
 
    import math
    import random
    import statistics
    import os
    import glob


#----- MATH

    print(math.cos(math.pi))  -->  -1
    print(math.cos(2*math.pi))
    print(math.exp(5))

# STATISTICS

    print(statistics.mean(list)) 
    print(statistics.variance(list)) 

# RANDOM
    print(random.choice(['jean', 'anne', 'julie']))

    print(random.choice(['jean', 'anne', 'julie']))
    print(random.random())          --> float
    print(random.randint(5, 10))    --> int
    print(random.randrange(100))    --> int between 0 and 100
    print(random.sample(range(100), 10))
 
# generate a random list
    print(random.sample(range (100), random.randrange(10)))

# shuffle permet de mélanger l'ordre des elts d'une liste
    random.shuffle(list)

# OS

    os.getcwd  --> get Current Work Directory : indique le rép courant

#GLOB

    print(glob.glob("*.txt")   --> Liste tous les fichiers *.txt
 
 Exemple : Combiner glob et file pour lire les contenus des fichiers du rep courant : 
 
    filenames = glob.glob('*.txt')
    
     for file in filenames:
        with open(file, 'r') as f:
            print(f.read())
 
 
 Exo : Lire le contenu d'un rep et enregistrer le contenu des fichiers dans un dict :
 
    NB : Dans une boucle for, on ne peut pas créer de nouvelles var mais on peut créer de nouvelles clés pour un dict
 
    filenames = glob.glob('*.txt')
    d = {}
    for file in filenames:
        with open(file, 'r') as f:
            d[file] = f.read().splitlines()    <-- Le dict crée une clé avec le nom du fichier dont la valeur est son contenu
            
            
    {'file.txt': ['103', '124', '1256', '23', '57', '246', '125', '267', '2544', '245', '231'], 
     'villes.txt': ['Paris', 'Lyon', 'Marseille', 'Lille', 'Toulouse', 'Strasbourg', 'Bordeaux']}


 
 ------------ Programmation Objet ------------------------------------------
 
 docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.html
 
 3 notions : Objet, Attribut, Methode
 Constructeur : permet de créer un objet de classe
 
 Class ndarray de numpy : Permet de créer des tableaux à N Dimensions
 
 class numpy.ndarray(shape, dtype=float, buffer=None, offset=0, strides=None, order=None)
 
 Attributes:  T:ndarray
    The transposed array.

    data: buffer
        Python buffer object pointing to the start of the array's data.

    dtype: dtype object
        Data-type of the array's elements.

    flags: dict
        Information about the memory layout of the array.

    flat: numpy.flatiter object
        A 1-D iterator over the array.

    imag: ndarray
        The imaginary part of the array.

    real:ndarray
        The real part of the array.

    size: int
        Number of elements in the array.

    itemsize: int
        Length of one array element in bytes.

    nbytes: int
        Total bytes consumed by the elements of the array.

    ndim: int
        Number of array dimensions.

    shape: tuple of ints
        Tuple of array dimensions.

    strides: tuple of ints
        Tuple of bytes to step in each dimension when traversing an array.

    ctypes: ctypes object
        An object to simplify the interaction of the array with the ctypes module.
 
 On a aussi bcp de methodes sur cette class
 
 Le constructeur s'appelle : array
 
 Pour l'utiliser :
 
    import numpy as np

    tableau = np.array([1, 2, 3])

    print(tableau.size)
 

-------------- NUMPAY Machine ----------------------

Le tableau numpay est beaucoup plus puissant qu'une liste :
    - Moins de place en mémoire donc plus rapide pour les operations
    - Bcp plus de methodes disponibles pour les actions ou operations
 
On utilisera bcp les tableaux à 2 dimensions, pratiques pour les images où on indiquera les coord x,y des pixels de l'image.
Chaque couleur representera une dimension pour le tableau d'une image


Attribut shape : permet de déterminer la forme du tableau

ex : ndim = 3       : tab à 3 dimensions
     shape(2,3,2)   : 2 elts sur les lignes, 3 elts sur les colonnes et 2 elts sur la hauteur 

L'attribut shape est un tuple :
    1. C'est donc une séquence : On peut accéder aux differentes valeurs en indiquant les indexes (shape[0] --> elt ligne)
    2. L''attribut shape ne peut être modifié car c''est un tuple

Attributs min à retenir : shape et size car ndim = 2 en général

- Constructeur array : 

    import numpy as np

    A = np.array([1, 2, 3])

    A.ndim      --->    1
    A.shape     --->    (3,)
 

- Constructeur zeros : remplit un tableau de zeros en indiquant le shape sous forme de tuples 
     B = np.zeros((3, 2))
     
         array([[0., 0.],
                [0., 0.],
                [0., 0.]])
    
    B.ndim        --->  2
    B.shape       ---> (3,2)
    type(B.shape) ---> tuple
    

- Constructeur ones : remplit un tableau de 1 

    C = np.ones((3,4))

      array([[1., 1., 1., 1.],
            [1., 1., 1., 1.],
            [1., 1., 1., 1.]])  
    
    C.size    --->    12  
    
- Constructeur full : remplit un tableau avec une valeur indiquée

    D = np.full((2, 3), 9)

         array([[9, 9, 9],
                [9, 9, 9]])   
    
- Constructeur random :

Permet de générer des nombres aléatoires. On utilise randn pour générer des nombres avec une distribution centré en en 0 (en stats).
Pour générer toujours les mêmes nombres, on fixe avec la fonction seed :

    np.random.seed(0)               <-- Si on change le nombre, les nombres générés vont changer
    np.random.randn(3, 4)

     array([[ 1.2824656 0.70519288, -1.71966591,-0.96709965],
            [-0.03140678,-0.59476713,0.59382329,1.44692847],
            [0.00404294, -0.05312601, -0.96163844,0.00219315]])   
    

- Constructeur eye : pour la matrice Identité

    np.eye(4)

      array([[1., 0., 0., 0.],
            [0., 1., 0., 0.],
            [0., 0., 1., 0.],
            [0., 0., 0., 1.]])
    
- Constructeur linspace : répartition équitable de n elts entre un debut et une fin (deb, fin, n)

    np.linspace(0, 10, 20)

    array([ 0., 0.52631579, 1.05263158, 1.57894737, 2.10526316, 2.63157895, 3.15789474, 3.68421053, 4.21052632, 4.73684211,
            5.26315789, 5.78947368, 6.31578947, 6.84210526, 7.36842105, 7.89473684, 8.42105263, 8.94736842, 9.47368421, 10.])   
    
- Constructeur arange : répartition d'elts entre un debut et une fin avec un pas (deb, fin, pas)
    
    np.arange(0, 10, 1) ---> array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    
--- dtype : Permet de définir le type de données dans notre tableau

NB : Quelque soit le constructeur choisi, on peut indiquer dtype pour le type de données. Cela permet d'avoir plus de précisions
sur les nombres à générer (float64 plus précis que float16) mais à l'inverse peut s'exécuter plus lentement

ex: np.linspace(0, 10, 20, dtype=np.float16)


---- Manipulation : utilisation de quelques méthodes
   
  A = np.zeros((3, 2))
  B = np.ones((3, 2))

    print(A)

        [[0.0.]
        [0. 0.]
        [0. 0.]]

    print(B)

        [[1. 1.]
        [1. 1.]
        [1. 1.]]
        

- Assemblage horizontal :

    C= np.hstack((A, B))

         array([[0., 0., 1., 1.],
                [0., 0., 1., 1.],
                [0., 0., 1., 1.]])   
    
    C.shape  -- > (3, 4)
    
- Assemblage vertical :

    D = np.vstack((A, B))

     array([[0., 0.],
            [0., 0.],
            [0., 0.],
            [1., 1.],
            [1., 1.],
            [1., 1.]])   

    D.shape  -- > (6, 2)
    
NB : On peut faire un assemblage avec concatenate. Ici on précise :

    'axis=0' pour assemblage verticale ou selon l'axe des ordonnéées  
    'axis=1' pour assemblage horizontale ou selon l'axe des absisses 

np.concatenate((A, B), axis=0)

        array([[0., 0.],
                [0., 0.],
                [0., 0.],
                [1., 1.],
                [1., 1.],
                [1., 1.]])
    

concatenate est plus pratique car permet de préciser axis=2 pour un tab de 3 dim, non disponible avec hstack ou vstack   
    
- Reshape : Permet de manipuler ou changer la forme d'un tableau 

NB: Le nombre d'elts final doit correspondre au nombre initial (lignes x colonnes)

    D = D.reshape((3,4))

         array([[0., 0., 0., 0.],
                [0., 0., 1., 1.],
                [1., 1., 1., 1.]])

    - Pour les tableaux à 1 dim, il est nécessaire souvent d'indiquer la colonne et ne pas laisser sous la forme A = (3, ) car
      cela peut engendrer des erreurs dans les codes. On utilise reschape comme ci-dessous :
      
            A = np.array([1, 2, 3])
            A = A.reshape((A.shape[0], 1))
            A.shape                         --->    (3, 1)
 
    - A l'inverse, on peut avoir de supprimer le 1 dans la colonne pour un shape. On utilise squeeze :
    
        A.squeeze
        A.shape                         --->    (3, )
        
    
- Methode ravel :

Permet de transformer ou aplatir un tableau en un tab à 1 dim : les différentes lignes sont alignées à la suite des autres   

    D.ravel()           --->  array ([0., 0., 0., 0., 0., 0., 1., 1., 1.,1., 1.,1.]
    D.ravel().shape     --->  (12, )


---------- Indexing, Slicing, Masking ------------------------------

import numpy as np

A= np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]

     array([[1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]])

- Accès simple : 

    A[1, 1]  --> 5

- Afficher tous les elts de la 1re colonne :    
    Α[:,0] -->  array([1, 4, 7])
    
- Afficher tous les elts de la 1re ligne :
    Α[0,:] ou Α[0] -->  array([1, 2, 3])
    Α[1]           -->  array([4, 5, 6])  : affiche la 2e ligne 
    
- Sélectionner un bloc :

    Α[0:2, 0:2]

          array([[1, 2],
                [4, 5]])




















